name: Sync selected files to Project-Aegis

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.public-include'
      - '.public-exclude'
      - 'src/**'
      - 'docs/**'
      - 'data/**'
      - 'families/**'
      - 'scripts/**'
      - 'README.aegis.md'
      - 'LICENSE'

jobs:
  sync:
    runs-on: ubuntu-latest

    env:
      AEGIS_OWNER: ${{ vars.AEGIS_OWNER || 'jhun5568' }}
      AEGIS_REPO: ${{ vars.AEGIS_REPO || 'Project-Aegis' }}
      AEGIS_BRANCH: ${{ vars.AEGIS_BRANCH || 'main' }}

    steps:
      - name: Checkout PRIVATE repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: private-repo

      - name: Debug - Check essential files
        run: |
          echo "=== Checking private repo files ==="
          cd private-repo
          echo "PWD: $(pwd)"
          ls -la
          echo ""
          test -f .public-include && echo "✅ .public-include exists" || echo "❌ .public-include missing"
          test -f .public-exclude && echo "✅ .public-exclude exists" || echo "❌ .public-exclude missing"

      - name: Install rsync
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync

      - name: Prepare export staging
        run: |
          cd private-repo
          rm -rf public_export && mkdir -p public_export
          
          echo "=== Processing .public-include ==="
          if [ ! -f ".public-include" ]; then
            echo "❌ ERROR: .public-include file not found!"
            exit 1
          fi
          
          # ✅ .public-include에서 제대로 읽기
          while IFS= read -r line; do
            [[ -z "$line" || "$line" =~ ^# ]] && continue
            echo "Include: $line"
            rsync -avr --prune-empty-dirs --relative "$line" public_export/ || true
          done < .public-include

          echo "=== Processing .public-exclude ==="
          if [ -f ".public-exclude" ]; then
            # ✅ .public-exclude에서 제대로 읽기
            while IFS= read -r pattern; do
              [[ -z "$pattern" || "$pattern" =~ ^# ]] && continue
              echo "Exclude: $pattern"
              find public_export -name "$pattern" -exec rm -rf {} + 2>/dev/null || true
            done < .public-exclude
          else
            echo "No .public-exclude file found, skipping exclusions"
          fi

          # README 치환
          if [ -f "README.aegis.md" ]; then
            cp README.aegis.md public_export/README.md
          fi

          echo "=== Final export contents ==="
          find public_export -type f | head -20
          echo "Total files: $(find public_export -type f | wc -l)"

      - name: Sync to PUBLIC repository
        run: |
          cd private-repo
          
          git config --global user.name "Auto Sync Bot"
          git config --global user.email "actions@github.com"

          git clone --depth 1 "https://${{ secrets.AEGIS_TOKEN }}@github.com/${{ env.AEGIS_OWNER }}/${{ env.AEGIS_REPO }}.git" out_repo
          
          cd out_repo
          git checkout -B "${{ env.AEGIS_BRANCH }}"
          
          rsync -av --delete --exclude ".git" ../public_export/ ./
          
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            git commit -m "chore(sync): update from Auto-CVS-Project at ${TS}"
            git push origin "${{ env.AEGIS_BRANCH }}"
          fi

      - name: Cleanup
        run: |
          rm -rf private-repo/out_repo private-repo/public_export